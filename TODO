Tasks 
    - Create Task
        - Support Bruteforce task
        - Support combinator task
        - Support Bandril approach
        - Support for cewl
    - Task info
        - List Associated TaskGroups
            - Going to require parsing tasks entry in task_groups
    - Task Edit
    - Delete Task
        - Prevent Deletion if associated to a Job
        - List Associated Jobs
        - List Associated Wordlists
        - List Associated TaskGroups
            - Going to require parsing tasks entry in task_groups

Taskgroups
    - List
        - Number of Tasks
        - Control
            - Info
                - List associated tasks
                    - Task name 
                    - Task Type
                - List associated Jobs
    - Info
        - List tasknames
        - List associated jobs
    - Assign Tasks 
        - Allow for task creation at task assignment (why did i even allow this in the first place)
        - Does it make sense to put these in a form?
        - Dont allow for duplicate tasks to be assigned
    - Delete task_groups
        - Prevent Deletion if assigned to a Job

Jobs
    - List
        - add column for cracked rate
    - Create Jobs
        - Assign existing Hashfiles
            - Exising Hashfile
                - Grey out tab if no pre-existing hashfile exists
            - New hashfiles
                - Select file format
                    - Give example (?) on mouse over
                - Select hash Type
                    - on other allow user to type in hashtype
        - Assign Tasks
            - Should probably be a form :/
            - Remove task from assignable tasks that are already assigned to the job
            - redirect back to assign tasks if no tasks are assigned
        - Offer cancel button along the entire process
            - deletes jobtasks
            - delete job
            - redirects to joblist
    - Edit

Analytics
    - I think outerjoins should be .joins
    - Set color scheme to look good
    - download pngs
    - Total Hashes Cracked vs uncracked
    - Total unique cracked vs uncracked
    - Top 10 masks
    - Top 20 users per single hash/password
    - All duplicates?
    - Both Bar graphs should render widths dynamically
    - Show users based on matching hashes
    - show users based on matching cracked passwords

Agents

API
    - Update CPU/GPU count
    - update cracks with each checkin

Search
    - Do we even let the user pick which type, or just run queries on both?
    - Export Results
    - Expand search text box

Wordlists
    - Change wordlist path attribute in db to be relative to app install path
        - does this affect the path returned by the API to agents?

Dynamic Wordlists
    - Create manually for now
        - Name: All Recovered Hashes

Rules
    - Edit 
        - Rules in browser

Hashfiles
    - List customers
        - List hashfiles
            - Control
                - Download Cracked
    - Filter Computer Accounts on Import
    - if > retention date Delete
        - delete Associated Jobs
        - if no other hashfiles exists for customer, delete customer
    - Delete
        - list associated jobs

Change 'user/wordlist/task/customer add's into popup'

Installation Instructions:
Installation files

    - install.sh
        - check for python3
        - check for mysql?
        - Cert Gen
        - pip install
        - create config for db (ask for creds)
            - db username
            - db password
            - db host
            - SMTP settings
                - sender address
                - server
                - username
                - password
                - TLS
            - hashview admin email address
            - hashview admin password     
            - hashview hashcat path
            - set default retention period 365
        - create db hashview
            - Set up settings table
            - create new Tasks
            - create dummy wordlist
                - create dummy dynamic wordlist
            - create dumy rules
            - create administrator account
        
        - export FLASK_APP=hashview.py 
            - flask db init
            - flask db migrate
            - flask db upgrade

    - upgrade.sh
        - export FLASK_APP=hashview.py 
            - flask db migrate
            - flask db upgrade 
        - What do we do with previous wordlists/rules and dynamic wordlist?

Wiki Instruction

Settings
    - OPTIMIZE TABLE hashes;
    - OPTIMIZE TABLE hashfile_hashes;
    - retention
        - set
        - validate
        - how to run on periodic basis?

DB
- Add DB indexes
- Add foreign keys

Add favicon

Force settings population if unset

If owner or admin
    - delete Wordlists
    - delete rules
    - delete tasks
    - delete taskgroups
    - stop Jobs
    - delete Jobs
    hashfiles/customers/hashes?

taskgroups / hashfiles should probably be renamed to task_groups and hash_files, word_lists?

Change dropdown alignment of jobs, tasks, manage (in templates/layout.html)

Form layout
    - Adjust label\nfield to lable field\n
        - Task
        - Customers
        - Wordlists
        - Task Lists
        - Task Groups
        - Rules
        - Jobs

Users
    - Delete   
        - Remove all 
            - wordlists
            - jobs
            - tasks

Notifications
    - confirmation before deletion 
    - Manageable by owner
    - how to handle deletion of user
    - Optimize hashes object in notifications_list class/route.

All
    - change uri scheme to be consistent
        - jobs/id/status
        - jobs/delete/id
        - agents/delete/id

Standardize modals
    - info
        - jobs
        - wordlists
        - rules
        - users
    - delete
        - jobs
        - wordlists
        - rules
        - users

To Test:
    1) load two hashfiles for a single customer
    2) remove one hashfile
    3) both cracked/uncracked count of other hashfile should not be affected

    1) load three hashfiles, two for one customer a third for a second customer
    2) remove one hashfile
    3) remaining cracked/uncracked counts should not be affected

    1) set forgot password
    2) attempt to login as the user prior to reset
    3) does it work?
    4) what happens if we request another token?

# Next Phase
- Add ability for users / admins? to import plaintext's and auto convert to specific hashes
API
    - Turn into legit resful api using flask_restful / api


update pushover stuff on job
profile -> pushover notification when null auto populates
update cracked hashes from agent to server. 

Update agent to stop downloading the same rules over and over again

Add 'insta crack results' as flash on import
Add indexes
add subhash for hashfile inserts

filter imports for usernames that contain non english characters
filter rules file that contain non-english characters

Max runtime per job admin setting

Dynamic hashfile based on hashtype.

Prevent duplicate Notifications

show notification selection on table load if previously selected by the user

# COMPLETE BEFORE OPEN BETA
- Notificaiton emails should contain link
- Login redirection based on URL
- Grey out pushover option in hash notifications
- Test if user can reset password to something < 14 chars long
- Add back buttons to job
- Add ability to edit job
- Sanity check when user submits invalid hashfile formats


Fix why agents keep asking for rules file

Deleting of hashfiles does not remove uncracked hashes (tested with ntlmv1 and ntlmv2 hashes)


